// Transition with prefixes + default

@mixin transition($args: all .3s ease-in-out 0s)
{
    -webkit-transition: $args;
    -moz-transition: $args;
    -o-transition: $args;
    transition: $args;
}

// Transition with prefixes + default to none

@mixin transform($args: none)
{
    -webkit-transform: $args;
    -moz-transform: $args;
    -o-transform: $args;
    transform: $args;
}

// Mega Center

@mixin mega-center($position: relative)
{
    position: $position;
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
}

// Vertical Center

@mixin vertical-center($position: relative)
{
    position: $position;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -o-transform: translateY(-50%);
    transform: translateY(-50%);
}

// Horizontal Center

@mixin horizontal-center($position: relative)
{
    position: $position;
    left: 50%;
    -webkit-transform: translateX(-50%);
    -moz-transform: translateX(-50%);
    -o-transform: translateX(-50%);
    transform: translateX(-50%);
}


// Filter with prefixes

@mixin filter($args: none)
{
    -webkit-filter: $args;
    -moz-filter: $args;
    -o-filter: $args;
    filter: $args;
}

// Flex with fallback to floats

@mixin flex()
{
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    flex-wrap: wrap;

    //clearfix fallback
    .ua-ie-9 &:before,
    .ua-ie-8 &:before,
    .ua-ie-9 &:after,
    .ua-ie-8 &:after
    {
        content: " ";
        display: table;
    }
    .ua-ie-9 &:after,
    .ua-ie-8 &:after
    {
        clear: both;
    }
    .ua-ie-9 & > *,
    .ua-ie-8 & > *
    {
        float: left;
    }
}

// Maintain an aspect ratio

@mixin aspect-ratio($width, $height)
{
    position: relative;
    &:before
    {
        display: block;
        content: "";
        width: 100%;
        padding-top: ($height / $width) * 100%;
    }
    > div
    {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }
}

// Absolutely Fill Container

@mixin absolute-fill
{
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
}

// Animation prefixing

@mixin keyframes($animationName)
{
    @-webkit-keyframes #{$animationName}
    {
        @content;
    }
    @-moz-keyframes #{$animationName}
    {
        @content;
    }
    @-o-keyframes #{$animationName}
    {
        @content;
    }
    @keyframes #{$animationName}
    {
        @content;
    }
}

@mixin animation($animations)
{
    -webkit-animation: $animations;
    -moz-animation:    $animations;
    -o-animation:      $animations;
    animation:         $animations;
}

@mixin animation-fill-mode($args)
{
    -webkit-animation-fill-mode:    $args;
    -moz-animation-fill-mode:       $args;
    -o-animation-fill-mode:         $args;
    animation-fill-mode:            $args;
}

// Clearfix

@mixin clearfix
{
    &:before,
    &:after
    {
        content: " ";
        display: table;
    }
    &:after
    {
        clear: both;
    }
}

// Width Wrappers

$wrappers: expand-width-wrapper;

@mixin wrapper-creation($name, $width)
{
    .#{$name}
    {
        max-width: $width;
        margin: 0 auto;
        clear: both;
    }
    @media(max-width: $width+2rem)
    {
        @each $wrapper in $wrappers
        {
            .#{$wrapper} .#{$name}
            {
                margin-left: 0;
                margin-right: 0;
            }
        }
        .#{$name}
        {
            margin-left: 1rem;
            margin-right: 1rem;
        }
    }
    $wrappers: append($wrappers, $name) !global;
}

// Magical Type!

@function strip-unit($value)
{
    @return $value / ($value * 0 + 1);
}
@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size)
{
    $u1: unit($min-vw);
    $u2: unit($max-vw);
    $u3: unit($min-font-size);
    $u4: unit($max-font-size);
    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
        & {
            font-size: $min-font-size;
            @media screen and (min-width: $min-vw) {
                font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
            }
            @media screen and (min-width: $max-vw) {
                font-size: $max-font-size;
            }
        }
    }
}